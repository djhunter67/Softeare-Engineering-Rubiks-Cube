# -*- org-confirm-babel-evaluate: nil -*-
#+AUTHOR: Christerpher Hunter
#+EMAIL: djhunter67@gmail.com
#+OPTIONS: toc:nil todo:nil  num:nil title:nil
#+LATEX_HEADER:\usepackage{mathptmx}
#+LATEX_HEADER: \usepackage[letterpaper,top=1in, bottom=1in, left=1.5in, right=1in]{geometry}
#+LATEX_HEADER: \usepackage[round]{natbib}
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \doublespacing
#+LATEX_HEADER:\pagenumbering{Roman}
#+LATEX_HEADER:\usepackage{scrlayer-scrpage}

\begin{titlepage}
\begin{center}
\vspace{2cm}
{\huge  Rubikan Design \par}
\vspace{2cm}
by \par
\vspace{0cm}
{\Large Christerpher Hunter \par}
\vfill
Nova Southeaster University\\
{\small \today  \par}
\end{center}
\end{titlepage}


* Design

** Startup

#+BEGIN_SRC plantuml :file startup_design.png

         scale 600

   class Initialize {
      -private OScheck: object 
      -private user_name: string

      --
    
      +present_GUI()
      +get_OS()
      }

    class OSCheck {
  +check_OS()
  +check_num_displays()
  }

    class Username {
    +prompt_username()
    +show_username()
  }

        Initialize <--> OSCheck
        Initialize <--> Username

#+END_SRC

#+RESULTS:
[[file:startup_design.png]]

\newpage
The purpose of the class Initialize is to launch the GUI window, get the username from the user (similar to an Arcade), and check the operating system.  The GUI window will present the Standby State presented in the next diagram.  The username function will prompt the user for a name to use when commiting scores.  The operating system check will get the name of the operating system and which distribution, if necessary.\\

The intent of having a module to display the GUI before the module that contains the buttons and actions is due to the manner of implementation of the GUI operation.  The idea here is to set up the frame and backdrop for the application first and then load the features afterward.  This will allow future enhancement of the application to be simpler.  The Standby State will reside in waiting and then immediately load into the Initialization class without delay.  This is due to a fluid and manipulative design.\\

The class Username is used in several places throughout the application in order to keep track of scores.  Each completed attempt will be coupled with a time and a username.  The username in, every instance, will be provided by class Username.  The class Username will prompt the user at the beginning of each launch of the application.  Another user, at any time during the Stanby State, can add a new username.  Upon the completion of a game, if there are two or more usernames, a confirmation prompt with the time and the username list will be shown.  The present user will need to choose, or optionally, enter a username; this is required to enter a winning time into the database.\\

The class OSCheck is intended to get the name and version of the operating system from which the application launches.  Should the operating system come back as a Linux operating system the class OSCheck will then attain the specfic distribution.  The purpose of checking the operating is two fold.  Firstly, the class MultiMonitor will communicate to the class OSCheck to obtain the operating system; this is needed for the class MultiMonitor to function as expected.  Secondly, to appropriately display the application and its popups the manner in which frames are displayed must be ascertained and is directly related to the operating system the application launches from.\\

\newpage
** Standby State
#+BEGIN_SRC plantuml :file main_design.png

        scale 600
        
      package SplashScreen <<Node>> {
        class Main {
        +controls_GUI()
        }
        class Cube {}
        class Username {}  
        <> diamond
      package Controls {
      class Start {
    -private get_state: string
    ==
    +start_game()
      }
      class TimeAttack {
    -private get_state: string
    #protected delay_time: float
    ==
       +check_for_times()
       +start_timer()
       +start_game()
      }
      class Compass {
    -private card_directions: object
    -private compass_img: any
    -private get_state: string
     
    +show_scores()
    +show_algorithms()	
      }
      class Quit {
    +exit_app()
      }
    }
        }
        package Models <<Database>>{
        class DataBase {} 
        }

       Main -- diamond
       diamond -- Start
       diamond -- TimeAttack
       diamond -- Compass
       diamond -- Quit
     hide @unlinked


#+END_SRC

#+RESULTS:
[[file:main_design.png]]

The splash screen serves as a template for which all non-timed activities are available and accomplishable.  The class Main has one method, the controls_ GUI, that communicates with the Controls module.  In the Controls module there exists four control classes.  The class Compass is a clickable button in the top left of the window that pops up another window displaying the previous times and username that reside in the database.  The class TimeAttack is similar to the start button in that it deactivates other buttons and moves the application from the Standby State to the Time-Attack State.  The class Start will initiate a normal game, deactivate other buttons, and move the application from the Standby State to the Active State.  The class Quit is design to exit the application at anytime during any state.\\


\newpage
** Active State
#+BEGIN_SRC plantuml :file game_design.png

         scale 600

         package "Active Game" as AG {
            class Start {
            -private get_username: string	 
            ==
                +check_if_name_in_db(username)
            +start_game()	
            }
            class Username {
	        ==
            +present_username()
            }  
            class Restart {
          +restart_session()
            }
            class Reset {
          +turn_clock_to_zero()
            }
                class Timer {
              -go: boolean
                  -noGo: boolean
            ==
              +activate_clock()
                  +activate_buttons()
                }
            class Selection {
          -private north: object
        -private south: object
      -private east: object
    -private west: object
            }
            class Rotate {
          ==
          +turn_entire_cube(cardinal_direction)
            }
            class Controls {
          ==
        +turn_individual_column(cardinal_direction)
        +turn_individual_row(cardinal_direction)
            }
            class Quit {
          ==
        +exit_app()
            }
                 <> diamond
   }
            package Models <<Database>>{
            class DataBase {
          -private username: string
        -private time_recoreded: float
      ==
    +table_entry(username, time)
            } 
            }

     package "Won Game" as WG {
            class Completed {
          -private time: float
        -private username: string
      ==
    +verify_user(username)
  +send_to_db(username, time)
                   +prompt_for_username()
            }
          }
           Start . diamond
           diamond - Selection
           diamond --> DataBase
           diamond --> Controls
               diamond --> Restart
           Controls <--> Rotate
         Controls <-->Selection
           Restart --> Reset
             Timer --> diamond
         Start <-- Username
         AG +--> WG
      Completed  --> DataBase
    hide @unlinked




#+END_SRC

#+RESULTS:
[[file:game_design.png]]

The class Start is the main way to initiate the active state.  When the active state is initiated the class Start will prompt the class Username for the username of the present session.  The class Start will then check the database for a prior entry of the passed username.  If no username is entered a prompt for a username will be presented upon a succesful solving of the puzzle via the class Completed.  Once the class start is satisfied the class Timer initiates the clock to begin counting up from zero.  Upon initiation of the clock the class Controls is activated and the user will be able to manipulate the cube.  The class Controls take an object direction gathered by the class Selection when a user selects a column or a row on the graphical cube.  The class Controls is only able to roate columns or rows of the cube.  The class Rotate is solely responsible for rotating the entire cube.  The class Restart will represent a graphical button that is intended to reset the cube.  The class Resart automatically prompts the class Reset and will reset the clock.  If puzzle is solved, after any allowed amount of time, the class Completed will take in the time and username, with the appropriate username checks, and send that information to the class Database.


\newpage
** Time-Attack State

#+BEGIN_SRC plantuml :file time-attack_design.png

      scale 600
    package TimeAttackMode {
    class TimeAttack {
  ==
        +begin_time_attack_mode(present_state)
        +check_db_for_time(username)
    }
        class Controls {
        ==
        +turn_individual_column(cardinal_direction)
        +turn_individual_row(cardinal_direction)
        }
       class Selection {
      -private north: object
        -private south: object
      -private east: object
    -private west: object
       }
     class Username {
   ==
   +present_username()
     }
         class Timer {
        -go: boolean
        -noGo: boolean
        ==
          +activate_clock()
          +activate_buttons()
         }
       class Rotate {
     ==
          +turn_entire_cube(cardinal_direction)
       }
   class Quit {
  ==
  +exit_app()
   }
      }
        package Models <<Database>> {
              class DataBase {
            -private username: string
        -private time_recoreded: float
      ==
    +table_entry(username, time)
              }
            }
          package Won {
           class Completed {
          -private time: float
        -private username: string
      ==
      +verify_user(username)
      +send_to_db(username, time)
      +prompt_for_username()
           }
        }


        TimeAttack <-- Username
        TimeAttack <-- Timer
        TimeAttack --> Controls
        Controls --> Selection
        Controls --> Rotate
        Models <--> TimeAttack
        Timer --|> Quit
        TimeAttackMode +--> Won
      Won --> DataBase


#+END_SRC

#+RESULTS:
[[file:time-attack_design.png]]

The time-attack can only be activated from the standby state.  There are only two differences between the time-attack state and the active state.  First, the class TimeAttack checks the class Database for a time, given a username.  If there is no time associated with the username, from past attempts during the active state,  the time-attack state cannot be entered.  Second, the clock counts down instead of up.  The timer starts at the shortest previous completion time associated with the given username.  The purpose of this mode is to best the users previous best time.  Should the time-attack mode be completed successfully, the new time will be calculated and sent to the class DataBase.

\newpage
** Data-centered Architecture

#+BEGIN_SRC plantuml :file data_design.png

  scale 600
  database "sqlite3" 

  frame "class Initialize" as f1
  frame "class Username" as f2
  frame "class TimeAttack" as f5
  frame "class Comparison" as f6
  frame "class Completed" as f7
  frame "class Compass" as f9
  frame "class Scores" as f10

      sqlite3 <-left-> f1
      sqlite3 <-right-> f2
      sqlite3 <--> f5
      sqlite3 <--> f6
      sqlite3 <-up-> f7
      sqlite3 <-up-> f9
      sqlite3 <-up-> f10


#+END_SRC

#+RESULTS:
[[file:data_architecture.png]]

The class DataBase 
